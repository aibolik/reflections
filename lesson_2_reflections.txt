What happens when you initialize a repository? Why do you need to do it?

When I run git init, Git creates .git directory. 


How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging are is something between working directory and repository. It's like a box, where we serve things to be transmitted.
We can add and remove items from it. And when we are done, we will transmit(commit) to repository.


How can you use the staging area to make sure you have one commit per logical change?

Using get diff check what has changed and track of logical changes.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are useful when you want to implement new features, add something new, but don't make changes to original. They will keep clean
master branch, and afterward, when new feature is approved, we can easily merge them.


How do the diagrams help you visualize the branch structure?

We can see reachability and whole structure of repository(what is been doing, etc).


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is that we have all commits in master branch, and also added feature with parent commits in the same branch. Merge makes it smartly 
by looking to history. It uses 3 commits(recent in 1st, recent in 2nd, the commit when divided).


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is good when we operate on different pars of code. But when it comes to changing same piece of code, Git will notify us about
confilcts, and should manually modify files to resolve the conflict. In files, the pieces of code, those should be modified are represented by
<<< HEAD
|||| merged common ancestors
====
>>> master